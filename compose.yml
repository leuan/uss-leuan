services:
  uss-ui:
    build: ./frontend/.
    container_name: uss-ui
    restart: always
    ports:
      - "8080:8080"
    depends_on:
      - uss-api
    networks:
      - uss-network

  uss-api:
    build: ./backend/.
    container_name: uss-api
    volumes:
      - ./backend/src/:/app/src
      - ./codeql-output/:/app/codeql-output
      - ./dc-output/:/app/dc-output
    env_file:
      - .env.prod
    depends_on:
      - uss-db
    networks:
      - uss-network

  uss-db:
    container_name: uss-db
    image: mongo:7.0.9
    restart: always
    ports:
      - "27017:27017"
    networks:
      - uss-network
    volumes:
      - mongo-data:/data/db

  uss-zap:
    image: ghcr.io/zaproxy/zaproxy:stable
    mem_limit: 2g
    container_name: uss-zap
    ports:
      - "8090:8090"
    env_file:
      - .env.prod
    command: sh -c "zap.sh -daemon -host 0.0.0.0 -port $${ZAP_PORT} -config api.addrs.addr.name=.* -config api.addrs.addr.regex=true -config api.key=$${ZAP_API_KEY}"
    networks:
      - uss-network

  uss-postgres:
    image: postgres:16.3-alpine3.20
    container_name: uss-postgres
    ports:
      - 5432:5432
    volumes:
      - pg-data:/var/lib/postgresql/data
    env_file:
      - .env.prod
    networks:
      - uss-network

  uss-keycloak:
    build: ./keycloak/.
    container_name: uss-keycloak
    env_file:
      - .env.prod
    networks:
      - uss-network
networks:
  uss-network:

volumes:
  mongo-data:
  pg-data:
